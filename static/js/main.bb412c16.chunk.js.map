{"version":3,"sources":["auth/service.js","auth/context.js","common/VerifyEmailPage.js","common/AuthRoute.js","user/service.js","user/context.js","Login/LoginForm.js","Login/LoginPage.js","logo.svg","Register/RegisterForm.js","Register/RegisterPage.js","PasswordReset/PasswordResetForm.js","PasswordReset/index.js","PasswordReset/PasswordResetPage.js","profile/service.js","profile/context.js","Navigation/NavigationMenu.js","Navigation/index.js","Matches/PetMatchesPage.js","Matches/PetDetailsPage.js","Logout/index.js","Logout/LogoutPage.js","Swiper/Swiper.js","ProfileCreator/MyProfilesPage.js","ProfileCreator/ProfileCreatorForm.js","ProfileCreator/ProfileCreatorPage.js","App.js","reportWebVitals.js","index.js"],"names":["AuthService","createUserWithEmailAndPassword","email","password","a","firebase","auth","then","userCredential","user","sendEmailVerification","signInWithEmailAndPassword","url","sendPasswordResetEmail","signOut","getCurrentUser","currentUser","setPersistence","Auth","Persistence","LOCAL","catch","error","console","log","AuthContext","React","createContext","displayName","VerifyEmailPage","props","useContext","useState","status","setStatus","Spinner","className","role","class","SuccessMessage","ErrorMessage","inProgress","success","onClick","event","preventDefault","AuthRoute","Component","component","rest","location","useLocation","render","emailVerified","to","pathname","state","referrer","UserService","setUserData","uid","data","coords","latitude","longitude","firestore","GeoPoint","collection","doc","set","merge","getUserData","get","docSnapshot","this","UserContext","LoginForm","setEmail","setPassword","Form","onSubmit","Group","controlId","Label","Control","type","onChange","e","target","value","Alert","variant","Button","LoginPage","userService","history","useHistory","setError","isEmailValid","test","Container","fluid","src","process","width","alt","navigator","geolocation","getCurrentPosition","position","push","RegisterForm","passwordConfirm","setPasswordConfirm","name","setName","id","placeholder","RegisterPage","userDB","matches","message","PasswordResetForm","emailError","setEmailError","noValidate","isInvalid","Feedback","PasswordResetPage","sent","CardBodyNotSent","sendResetEmail","CardBodySent","sending","ProfileService","create","image","profile","users","exists","Promise","reject","imageRef","images","child","uuidv4","imageUrl","put","getDownloadURL","profiles","createdBy","getByProfileId","getByUserId","where","querySnapshot","docs","map","addMatch","pid","getMatches","length","FieldPath","documentId","getMatchSuggestions","filter","storage","ref","ProfileContext","NavPage","Navbar","collapseOnSelect","expand","Brand","Image","Toggle","aria-controls","Collapse","Nav","ProfilesList","authService","profileService","setState","style","textDecoration","color","maxWidth","breed","PetMatchesPage","Consumer","firebaseAuthService","firebaseProfileService","capitalize","str","charAt","toUpperCase","slice","PetDetailPage","setProfile","profileId","useRouteMatch","path","strict","sensitive","params","profileObj","gender","age","bio","PetDetailsPage","LogoutPage","useEffect","Swiper","cardRef","useRef","setProfiles","handleClick","direction","current","buttonStyle","backgroundColor","borderColor","Card","onAnimationEnd","tail","setTimeout","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","Img","height","visibility","Body","Title","Text","MyProfilesPage","imageDivStyle","borderRadius","border","fontSize","display","justifyContent","alignItems","bottom","right","ProfileCreatorForm","setBreed","setGender","setType","setAge","setBio","imageFile","setImageFile","previewDataURL","setPreviewDataURL","replace","Check","label","checked","as","rows","File","file","reader","FileReader","onload","result","readAsDataURL","handleProfilePic","files","ProfileCreatorPage","App","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","StrictMode","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.bb412c16.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nclass AuthService {\r\n    \r\n    constructor() {\r\n        firebase.auth()\r\n            .setPersistence(firebase.auth.Auth.Persistence.LOCAL)\r\n            .then(() => { /* Nothing to do */ })\r\n            .catch((error) => console.log(error));\r\n    }\r\n\r\n    /**\r\n     * Creates a new user account with the specified email and password.\r\n     * \r\n     * On successful creation of the user account, this user will be signed in\r\n     * to the application and a verification email will be sent to the users\r\n     * email address.\r\n     * \r\n     * @param {string} email - The user's email address.\r\n     * @param {string} password - The user's chosen password.\r\n     * \r\n     * @returns If successful, returns a resolved Promise with the value of\r\n     *          the firebase.User created. Otherwise, returns a rejected\r\n     *          Promise with a value of firebase.auth.Error. \r\n     */\r\n    createUserWithEmailAndPassword = async (email, password) => {\r\n        return firebase.auth()\r\n            .createUserWithEmailAndPassword(email, password)\r\n            .then((userCredential) => {\r\n                let user = userCredential.user;\r\n                this.sendEmailVerification(user);\r\n                return user;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Signs in user with the specified email and password.\r\n     * \r\n     * @param {string} email - The user's email.\r\n     * @param {string} password - The user's password.\r\n     * \r\n     * @returns If successful, returns a resolved Promise with the value of\r\n     *          firebase.User. Otherwise, returns a rejected Promise with a\r\n     *          value of firebase.auth.Error.\r\n     */\r\n    signInWithEmailAndPassword = async (email, password) => {\r\n        return firebase.auth()\r\n            .signInWithEmailAndPassword(email, password)\r\n            .then((userCredential) => userCredential.user);\r\n    }\r\n\r\n    /**\r\n     * Sends a verification email to a user.\r\n     * \r\n     * @param {firebase.User} user - The user with the email to be verified.\r\n     * \r\n     * @returns If successful, returns a Promise<void>. Otherwise, returns a\r\n     *          Promise<firebase.auth.Error>.\r\n     */\r\n    sendEmailVerification = async (user) => {\r\n        return user.sendEmailVerification({url: 'http://localhost:3000'});\r\n    }\r\n\r\n    /**\r\n     * Sends a password reset email to the specified email.\r\n     * \r\n     * @param {string} email - The email address with the password to be reset.\r\n     * \r\n     * @returns If successful, returns a Promise<void>. Otherwise, returns a\r\n     *          Promise<firebase.auth.Error>. \r\n     */\r\n    sendPasswordResetEmail = async (email) => {\r\n        return firebase.auth().sendPasswordResetEmail(email, {url: 'http://localhost:3000'});\r\n    }\r\n\r\n    /**\r\n     * Signs out the currently signed-in user.\r\n     */\r\n    signOut = () => {\r\n        return firebase.auth().signOut();\r\n    }\r\n\r\n    /**\r\n     * Returns the currently signed-in user (null if no signed in user).\r\n     */\r\n    getCurrentUser = () => {\r\n        return firebase.auth().currentUser;\r\n    }\r\n}\r\n\r\nexport default AuthService;","import React from 'react';\r\n\r\nconst AuthContext = React.createContext(null);\r\nAuthContext.displayName = 'AuthContext';\r\n\r\nexport default AuthContext;","import { useContext, useState } from \"react\";\r\nimport { AuthContext } from \"../auth\";\r\n\r\nconst VerifyEmailPage = (props) => {\r\n    const auth = useContext(AuthContext);\r\n    const [status, setStatus] = useState(null);\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault();\r\n\r\n        // Start spinner\r\n        setStatus({\r\n            inProgress: true \r\n        });\r\n\r\n        // Once email is sent successfully or with error, stop showing spinner\r\n        // and show the appropriate message.\r\n        auth.sendEmailVerification(auth.getCurrentUser())\r\n            .then(() => {\r\n                setStatus({\r\n                    inProgress: false,\r\n                    success: true\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                setStatus({\r\n                    inProgress: false,\r\n                    error: true\r\n                });\r\n            });\r\n    }\r\n\r\n    const Spinner = () => <div className=\"spinner-border text-primary\" role=\"status\"><span class=\"sr-only\">Loading...</span></div>;\r\n    const SuccessMessage = () => <div className=\"alert alert-success\" role=\"alert\">Verification email sent!</div>;\r\n    const ErrorMessage = () => <div className=\"alert alert-danger\" role=\"alert\">Unable to send email. Please try again later.</div>;\r\n\r\n    return (\r\n        <div className=\"container vh-100 d-flex justify-content-center align-items-center\">\r\n            <div className=\"card text-center shadow\">\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">Please verify your email</h5>\r\n                    <p className=\"card-text\">You're almost there! We sent an email to <strong>{auth.getCurrentUser().email}</strong></p>\r\n                    <p className=\"card-text\">If you don't see the email, please <strong>check your spam folder</strong>.</p>\r\n                    <p className=\"card-text\">Still can't find the email?</p>\r\n                    {status \r\n                        ? ((status.inProgress && <Spinner />) || (status.success && <SuccessMessage />) || (status.error && <ErrorMessage />))\r\n                        : <button className=\"btn btn-primary\" onClick={handleClick}>Resend Email</button>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VerifyEmailPage;","import { useContext } from 'react';\r\nimport { Route, Redirect, useLocation } from 'react-router-dom';\r\nimport { AuthContext } from '../auth';\r\nimport VerifyEmailPage from './VerifyEmailPage';\r\n\r\nconst AuthRoute = ({ component: Component, ...rest }) => {\r\n    const auth = useContext(AuthContext);\r\n    const location = useLocation();\r\n\r\n    return (\r\n        <Route {...rest} render={(props) => (\r\n            auth.getCurrentUser()\r\n                ? (auth.getCurrentUser().emailVerified ? <Component {...props} /> : <VerifyEmailPage {...props} />)\r\n                : <Redirect to={ { pathname: '/login', state: { referrer: location } } } />\r\n        )} />\r\n    )\r\n};\r\n\r\nexport default AuthRoute;","import firebase from 'firebase';\r\n\r\nclass UserService {\r\n\r\n    constructor() {\r\n        this.collection = firebase.firestore().collection('users');\r\n    }\r\n\r\n    /**\r\n     * Writes data to the users document.\r\n     * \r\n     * If the user does not exist, it will be created. Otherwise, the data\r\n     * will be overwritten.\r\n     * \r\n     * The method call will only replace the values specified in the data\r\n     * object. Fields omitted from the data object will remain untouched.\r\n     * \r\n     * @param {string} uid - The unique user id of the firebase.User object.\r\n     * @param {Object} data - An object whose fields contain the data to be set.\r\n     * \r\n     * @returns On success, returns a resolved Promise with no value. Otherwise,\r\n     *          returns a rejected Promise with an error value.\r\n     */\r\n    setUserData = async (uid, data) => {\r\n        if (data.coords) {\r\n            const {latitude, longitude} = data.coords;\r\n            data = {...data, coords: new firebase.firestore.GeoPoint(latitude, longitude)};\r\n        }\r\n        return this.collection.doc(uid).set({...data}, {merge: true});\r\n    }\r\n\r\n    /**\r\n     * Gets the data from the users document.\r\n     * \r\n     * @param {string} uid - The unique user id of the firebase.User object.\r\n     * \r\n     * @returns Returns a Promise containing a data object with all the fields\r\n     *          in the user's document. Otherwise, returns a rejected Promise\r\n     *          containing an error. \r\n     */\r\n    getUserData = async (uid) => {\r\n        return this.collection.doc(uid).get()\r\n            .then((docSnapshot) => docSnapshot.data());\r\n    }\r\n};\r\n\r\nexport default UserService;","import React from 'react';\r\n\r\nconst UserContext = React.createContext(null);\r\nUserContext.displayName = 'UserContext';\r\n\r\nexport default UserContext;","import { useState } from 'react';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nconst LoginForm = (props) => {\r\n\r\n    // Use the useState hook to hook into the React state even though\r\n    // this is a function component.\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        props.onSubmit(email, password);\r\n    };\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Form.Group controlId=\"formGroupEmail\">\r\n                <Form.Label>Email</Form.Label>\r\n                <Form.Control \r\n                    type=\"email\" \r\n                    className=\"LoginForm-input\" \r\n                    onChange={e => setEmail(e.target.value)}\r\n                />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formGroupPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control\r\n                    type=\"password\"\r\n                    className=\"LoginForm-input\"\r\n                    onChange={e => setPassword(e.target.value)}\r\n                />\r\n            </Form.Group>\r\n            {props.error &&\r\n                <Alert variant=\"danger\">\r\n                    {props.error}\r\n                </Alert>\r\n            }\r\n            <div className=\"text-center\">\r\n                <Button type=\"submit\" className=\"px-4 LoginForm-button\">\r\n                    Login\r\n                </Button>\r\n            </div>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default LoginForm;","import React, { useContext, useState } from 'react';\r\nimport { Link, useHistory, useLocation } from 'react-router-dom';\r\nimport { AuthContext } from '../auth';\r\nimport { UserContext } from '../user';\r\n\r\nimport Container from 'react-bootstrap/Container'\r\n\r\nimport LoginForm from './LoginForm'; \r\nimport logo from '../logo.svg';\r\n\r\nimport './login.css';\r\n\r\nconst LoginPage = (props) => {\r\n\r\n    // Subscirbe to auth context to use auth service.\r\n    const auth = useContext(AuthContext);\r\n\r\n    // Subscribe to user context to use the user service.\r\n    const userService = useContext(UserContext);\r\n\r\n    // The useHistory hook gives access to the `history` instance that\r\n    // can be used to navigate to different URLs.\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    // Use this state to notify the form if login was not successful.\r\n    const [error, setError] = useState('');\r\n\r\n    // Gets passed to the login form to allow the login form to notify\r\n    // the login page when the form has been submited.\r\n    const handleLogin = (email, password) => {\r\n        if (!isEmailValid(email)) {\r\n            setError('Valid email required.');\r\n        } else if (!password) {\r\n            setError('Password required.');\r\n        } else {\r\n            auth.signInWithEmailAndPassword(email, password)\r\n                .then(user =>{\r\n                    // Get and save the users current geolocation so it can be\r\n                    // used to calculate distance from potential matches.\r\n                    navigator.geolocation.getCurrentPosition((position) => {\r\n                        userService.setUserData(user.uid, {coords: position.coords})\r\n                    }, (error) => {\r\n                        // TODO: need to handle the case if user doesn't allow\r\n                        //       location services to be used.\r\n                        console.log(error);\r\n                    });\r\n                    if (location.state && location.state.referrer) {\r\n                        history.push(location.state.referrer.pathname);\r\n                    } else {\r\n                        history.push('/')\r\n                    }\r\n                })\r\n                .catch(error => setError('Invalid email or password.'));\r\n        }\r\n    }\r\n\r\n    const isEmailValid = (email) => (\r\n        email && /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(email)\r\n    );\r\n\r\n    return (\r\n        <Container fluid=\"sm\" className=\"vh-100 d-flex flex-column justify-content-center\">\r\n            <div className=\"text-center\">\r\n                <img src={`${process.env.PUBLIC_URL}/logo.png`} width=\"200\" alt=\"Pinder logo\" />\r\n                <h1>Login</h1>\r\n            </div>\r\n            <LoginForm onSubmit={handleLogin} error={error} />\r\n            <div className=\"mt-4 text-center\">\r\n                <span>Don't have an account? </span>\r\n                <Link to='/register'>Register</Link>\r\n            </div>\r\n            <div className=\"mt-2 text-center\">\r\n                <Link to='/password-reset'>Forgot password?</Link>\r\n            </div>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default LoginPage;","export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","import { useState } from 'react';\r\nimport { Alert, Button, Form } from 'react-bootstrap'\r\n\r\nconst RegisterForm = (props) => {\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [passwordConfirm, setPasswordConfirm] = useState('');\r\n    const [name, setName] = useState('');\r\n/*     const [street, setStreet] = useState('');\r\n    const [city, setCity] = useState('');\r\n    const [usState, setUsState] = useState('');\r\n    const [zip, setZip] = useState(''); */\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        props.onSubmit(email, password, passwordConfirm, name);\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Form.Group controlId='name'>\r\n                <Form.Label>Name</Form.Label>\r\n                <Form.Control\r\n                    type=\"text\"\r\n                    id=\"name\"\r\n                    value={name}\r\n                    onChange = {e=> setName(e.target.value)}\r\n                    placeholder=\"Your Name\"\r\n                />\r\n            </Form.Group>\r\n            <Form.Group controlId='email'>\r\n                <Form.Label>Email</Form.Label>\r\n                <Form.Control\r\n                    type=\"email\"\r\n                    id=\"email\"\r\n                    value={email}\r\n                    onChange={e=> setEmail(e.target.value)}\r\n                    placeholder=\"Email\"\r\n                />\r\n            </Form.Group>\r\n            <Form.Group controlId='password'>\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    value={password}\r\n                    onChange={e=> setPassword(e.target.value)}\r\n                    placeholder=\"Password\"\r\n                />\r\n            </Form.Group>\r\n            <Form.Group controlId='password'>\r\n                <Form.Label>Confirm Password</Form.Label>\r\n                <Form.Control\r\n                    type=\"password\"\r\n                    id=\"passwordConfirm\"\r\n                    value={passwordConfirm}\r\n                    onChange = {e=> setPasswordConfirm(e.target.value)}\r\n                    placeholder=\"Confirm password\"\r\n                />\r\n            </Form.Group>\r\n            {props.error &&\r\n                <Alert variant=\"danger\">\r\n                    {props.error}\r\n                </Alert>\r\n            }\r\n            <div className=\"text-center\">\r\n                <Button type=\"submit\" className=\"px-4 LoginForm-button\">\r\n                    Login\r\n                </Button>\r\n            </div>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default RegisterForm;","import RegisterForm from './RegisterForm';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useContext, useState } from 'react';\r\nimport { AuthContext } from '../auth';\r\nimport { UserContext } from '../user';\r\nimport logo from '../logo.svg';\r\n\r\nfunction RegisterPage(props) {\r\n\r\n    const auth = useContext(AuthContext);\r\n    const userDB = useContext(UserContext);\r\n    const history = useHistory();\r\n    const [error, setError] = useState('');\r\n\r\n    const handleRegister = (email, password, passwordConfirm, name) => {\r\n        if (!isEmailValid(email)) {\r\n            setError('Valid email required.');\r\n            console.log(\"Invalid email\");\r\n        }\r\n        else if (!password) {\r\n            setError('Password required');\r\n        }\r\n        else if (password !== passwordConfirm) {\r\n            setError('Password and Password confirm do not match.');\r\n            console.log(\"passwords don't match\");\r\n        } else {\r\n            auth.createUserWithEmailAndPassword(email, password)\r\n                .then((user) => userDB.setUserData(user.uid, {email:email, name:name, matches: []}))\r\n                .then(user => history.push('/'))\r\n                .catch(error => {\r\n                    setError(`Error:${error.message}`);\r\n                });\r\n        }\r\n    };\r\n\r\n    const isEmailValid = (email) => (\r\n        email && /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(email)\r\n    );\r\n\r\n    return (\r\n        <div className=\"container vh-100 d-flex align-items-center\">\r\n            <div className=\"w-100\">\r\n                <div className=\"text-center\">\r\n                    <img src={`${process.env.PUBLIC_URL}/logo.png`} width=\"200\" alt=\"Pinder logo\" />\r\n                    <h1>Register</h1>\r\n                </div>\r\n                <RegisterForm onSubmit={handleRegister} error={error} />\r\n                <div className=\"mt-4 text-center\">\r\n                    <span>Already have an account?</span>\r\n                    <Link to='/login'>Login</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default RegisterPage;","import { useState } from \"react\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './password_reset.css'\r\n\r\nconst PasswordResetForm = (props) => {\r\n    const [email, setEmail] = useState('');\r\n    const [emailError, setEmailError] = useState(null);\r\n\r\n    // Same email validation regexp used by W3C.\r\n    const isEmailValid = (email) => (\r\n        email && /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(email)\r\n    );\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!email) {\r\n            setEmailError('Email is required');\r\n        } else if (!isEmailValid(email)) {\r\n            setEmailError('Please enter a valid email address');\r\n        } else {\r\n            setEmailError(null);\r\n            props.onSubmit(email);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit} noValidate>\r\n            <Form.Group controlId=\"formGroupEmail\">\r\n                <Form.Control\r\n                    type=\"email\"\r\n                    className=\"PasswordReset-input\"\r\n                    placeholder=\"Email address\"\r\n                    value={email}\r\n                    isInvalid={emailError}\r\n                    onChange={e => setEmail(e.target.value)}\r\n                />\r\n                {emailError &&\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        {emailError}\r\n                    </Form.Control.Feedback>\r\n                }\r\n            </Form.Group>\r\n            <div className=\"text-center\">\r\n                <Button type=\"submit\" className=\"px-4 PasswordReset-button\">\r\n                    Send password reset email\r\n                </Button>\r\n            </div>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default PasswordResetForm;","import PasswordResetPage from './PasswordResetPage'\r\n\r\nexport default PasswordResetPage;\r\n","import { useContext, useState } from 'react';\r\nimport PasswordResetForm from './PasswordResetForm';\r\nimport { AuthContext } from '../auth';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PasswordResetPage = (props) => {\r\n\r\n    // Get access to the auth service instance.\r\n    const auth = useContext(AuthContext);\r\n\r\n    // Use state to render different components depending on whether reset\r\n    // email was sent or not.\r\n    const [status, setStatus] = useState({sent: false});\r\n\r\n    // Render prompt and form to input email.\r\n    const CardBodyNotSent = () => (\r\n        <>\r\n            <p className=\"card-text text-center\">Enter your email and we'll send you a link to reset your password.</p>\r\n            <PasswordResetForm onSubmit={sendResetEmail}/>\r\n            <div className=\"text-center mt-3\">\r\n                <Link to=\"/register\">Create an account</Link>\r\n            </div>\r\n            <div className=\"text-center mt-2\">\r\n                <Link to=\"/login\">Login instead</Link>\r\n            </div>\r\n        </>\r\n    );\r\n    \r\n    // Render result after reset email is sent and link to go back to login page.\r\n    const CardBodySent = () => (\r\n        <>\r\n            <p className=\"card-text text-center\">Check your email for a link to reset your password. If it doesn’t appear within a few minutes, check your spam folder.</p>\r\n            <div className=\"text-center\">\r\n                <Link to=\"/login\">Back to login</Link>\r\n            </div>\r\n        </>\r\n    );\r\n\r\n    // Loading spinner \r\n    const Spinner = () => (\r\n        <div className=\"text-center\">\r\n            <div className=\"spinner-border text-primary\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    // Use the auth service to send the password reset email and update state.\r\n    const sendResetEmail = (email) => {\r\n        setStatus({sending: true});\r\n\r\n        auth.sendPasswordResetEmail(email)\r\n            .then(() => {\r\n                setStatus({\r\n                    sent: true,\r\n                    sending: false\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                setStatus({\r\n                    sent: true,\r\n                    sending: false\r\n                });\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className=\"container vh-100 d-flex justify-content-center align-items-center\">\r\n            <div className=\"card shadow\">\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title text-center\">Reset Your Password</h5>\r\n                    {!status.sent && !status.sending && <CardBodyNotSent />}\r\n                    {status.sent && <CardBodySent />}\r\n                    {status.sending && <Spinner />}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PasswordResetPage;","import firebase from 'firebase';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nclass ProfileService {\r\n\r\n    constructor() {\r\n        this.users = firebase.firestore().collection('users');\r\n        this.profiles = firebase.firestore().collection('profiles');\r\n        this.images = firebase.storage().ref().child('images');\r\n    }\r\n\r\n    /**\r\n     * Creates a new pet profile and saves it in the database.\r\n     * \r\n     * @param {string} uid     - The unique user id of the firebase.User object. \r\n     * @param {File}   image   - The image file uploaded by a user.\r\n     * @param {Object} profile - An object whose fields contain the data to be set e.g.\r\n     *                              profile = {\r\n     *                                  name: \"Fluffy\",\r\n     *                                  breed: \"Shepherd mix\",\r\n     *                                  gender: \"male\",\r\n     *                                  age: 1,\r\n     *                                  fixed: true,\r\n     *                                  description: \"I'm fluffy, smart, and want ALL of your attention.\",\r\n     *                              }\r\n     * \r\n     * @returns On success, returns a resolved Promise with no value. Otherwise,\r\n     *          returns a rejected Promise with an error value.\r\n     */\r\n    create = async (uid, image, profile) => {\r\n        // Make sure that a user with the specified uid exists first.\r\n        let user = await this.users.doc(uid).get()\r\n\r\n        if (!user.exists) {\r\n            return Promise.reject(`A user with uid = ${uid} does not exist.`);\r\n        }\r\n\r\n        // Create a new image reference with a unique id as the file name.\r\n        // A UUID v4 is effectively guaranteed to be universally unique.\r\n        let imageRef = this.images.child(uuidv4());\r\n\r\n        // On successful upload, this will be an http url that can be used\r\n        // to download the image.\r\n        let imageUrl = null;\r\n\r\n        // Upload the image to storage.\r\n        try {\r\n            await imageRef.put(image)\r\n            imageUrl = await imageRef.getDownloadURL();\r\n        } catch (error) {\r\n            return Promise.reject('Unable to upload image file.');\r\n        }\r\n\r\n        // Save the profile to firestore.\r\n        return this.profiles.doc().set({createdBy: uid, imageUrl, ...profile});\r\n    }\r\n\r\n    /**\r\n     * Get a single pet profile by its id.\r\n     * \r\n     * @param {string} id - The unique id of the profile document.\r\n     * \r\n     * @returns On success, returns a resolved Promise with the profile object.\r\n     *          Otherwise, returns a rejected Promise with an error. \r\n     */\r\n    getByProfileId = async (id) => {\r\n        return this.profiles.doc(id).get()\r\n            .then(docSnapshot => ({ id: docSnapshot.id, ...docSnapshot.data() }));\r\n    }\r\n\r\n    /**\r\n     * Get all profiles created by a user.\r\n     * \r\n     * @param {string} uid - The unique user id of the firebase.User object.\r\n     * \r\n     * @returns On success, returns a resovled Promise with an array of profile\r\n     *          objects. Otherwise, returns a rejected Promise with an error.\r\n     */\r\n    getByUserId = async (uid) => {\r\n        let user = await this.users.doc(uid).get();\r\n\r\n        if (!user.exists) {\r\n            return Promise.reject(`A user with uid = ${uid} does not exist.`);\r\n        }\r\n\r\n        return this.profiles\r\n            .where('createdBy', '==', uid)\r\n            .get()\r\n            .then(querySnapshot => (\r\n                querySnapshot.docs.map(doc => ({\r\n                    id: doc.id,\r\n                    ...doc.data()\r\n                }))\r\n            ));\r\n    }\r\n\r\n    /**\r\n     * Add a new profile match for the user.\r\n     * \r\n     * @param {string} uid - The users id. \r\n     * @param {string} pid - The profiles id.\r\n     */\r\n    addMatch = async (uid, pid) => {\r\n        let user = await this.users.doc(uid).get();\r\n        let profile = await this.profiles.doc(pid).get();\r\n\r\n        if (!user.exists || !profile.exists) {\r\n            return Promise.reject('User or profile does not exist');\r\n        }\r\n\r\n        user = user.data();\r\n        user.matches.push(pid)\r\n\r\n        return this.users.doc(uid).set({...user});\r\n    }\r\n\r\n    /**\r\n     * Get all profiles user has matched with.\r\n     * \r\n     * @param {string} uid - The users id. \r\n     */\r\n    getMatches = async (uid) => {\r\n        let user = await this.users.doc(uid).get();\r\n\r\n        if (!user.exists) {\r\n            return Promise.reject(`User ${uid} does not exist`);\r\n        }\r\n\r\n        user = user.data();\r\n\r\n        return user.matches.length\r\n            ? this.profiles\r\n                .where(firebase.firestore.FieldPath.documentId(), 'in', user.matches)\r\n                .get()\r\n                .then(querySnapshot => (\r\n                    querySnapshot.docs.map(doc => ({\r\n                        id: doc.id,\r\n                        ...doc.data()\r\n                    }))\r\n                ))\r\n            : [];\r\n    }\r\n\r\n    /**\r\n     * Get profile suggesstions that can be potential matches.\r\n     * \r\n     * TODO: Implement a matching algorithm. Right now, we are just returning any\r\n     *       profile that was not created by the user and that the user has not \r\n     *       already matched with.\r\n     *  \r\n     * @param {string} uid - The users id. \r\n     */\r\n    getMatchSuggestions = async (uid) => {\r\n        let user = await this.users.doc(uid).get();\r\n\r\n        if (!user.exists) {\r\n            return Promise.reject(`User ${uid} does not exist`);\r\n        }\r\n\r\n        user = user.data();\r\n        \r\n        return user.matches.length\r\n            ? this.profiles\r\n                .where(firebase.firestore.FieldPath.documentId(), 'not-in', user.matches)\r\n                .get()\r\n                .then(querySnapshot => querySnapshot.docs.map(doc => ({\r\n                    id: doc.id,\r\n                    ...doc.data()\r\n                })))\r\n                .then(profiles => profiles.filter(profile => profile.createdBy !== uid))\r\n            : this.profiles\r\n                .where('name', '!=', '')\r\n                .get()\r\n                .then(querySnapshot => querySnapshot.docs.map(doc => ({\r\n                    id: doc.id,\r\n                    ...doc.data()\r\n                })))\r\n                .then(profiles => profiles.filter(profile => profile.createdBy !== uid))\r\n    }\r\n\r\n};\r\n\r\nexport default ProfileService;","import React from 'react';\r\n\r\nconst ProfileContext = React.createContext(null);\r\nProfileContext.displayName = 'ProfileContext';\r\n\r\nexport default ProfileContext;","import Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavigationMenu.css';\r\n\r\nfunction NavPage(props) {\r\n    return (\r\n        <Navbar collapseOnSelect expand=\"lg\">\r\n            <Navbar.Brand>\r\n                <Link to=\"/\"><Image src={`${process.env.PUBLIC_URL}/logo.png`} alt=\"Pinder Logo\" /></Link>\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Link to=\"/\">Dashboard</Link>\r\n                    <Link to=\"/find\">Find a Furry Friend</Link>\r\n                    <Link to=\"/profiles\">Find a Human</Link>\r\n                    <Link to=\"/logout\">Logout</Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n       \r\n    );\r\n}\r\n\r\nexport default NavPage;","import NavPage from './NavigationMenu';\r\n\r\nexport default NavPage;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { AuthContext } from '../auth';\r\nimport { ProfileContext } from '../profile';\r\nimport './PetMatches.css';\r\nimport NavPage from '../Navigation';\r\n\r\nclass ProfilesList extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            profiles: [],\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const {authService, profileService} = this.props; \r\n        \r\n        const user = authService.getCurrentUser();\r\n        const profiles = await profileService.getMatches(user.uid);\r\n        this.setState({\r\n            profiles: profiles\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {profiles} = this.state;\r\n\r\n        return (\r\n            <div className='container'>\r\n                <NavPage />\r\n                <p className='h1'>Your Matches</p>\r\n                <hr />\r\n                {profiles.length\r\n                    ? profiles.map(profile => (\r\n                        <Link to={`/profiles/${profile.id}`} style={{ textDecoration: 'none', color: '#212121' }}>\r\n                            <div className=\"card mb-1 shadow\" style={{ maxWidth: '100%' }}>\r\n                                <div className=\"row no-gutters\">\r\n                                    <div className=\"col-4\">\r\n                                        <img className=\"card-image\" src={profile.imageUrl} alt=\"\" width={350} />\r\n                                    </div>\r\n                                    <div className=\"col-8\">\r\n                                        <div className=\"card-body\">\r\n                                            <div className=\"card-title\">{profile.name}</div>\r\n                                            <div className=\"card-text\">{profile.breed}</div>\r\n                                            <div className=\"card-text\">Description Here</div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>                            \r\n                        </Link>)\r\n                    ): (\r\n                        <p>You do not have any matches yet &#9785;</p>\r\n                    )}\r\n            </div>\r\n        )\r\n    }\r\n\r\n};\r\n\r\nfunction PetMatchesPage() {\r\n    return (\r\n        <AuthContext.Consumer>{(firebaseAuthService) => (\r\n            <ProfileContext.Consumer>{(firebaseProfileService) => (\r\n                <ProfilesList \r\n                    authService={firebaseAuthService}\r\n                    profileService={firebaseProfileService}/>\r\n            )}</ProfileContext.Consumer>\r\n        )}</AuthContext.Consumer>        \r\n    );\r\n}\r\n\r\nexport default PetMatchesPage;","import React, { useContext, useState } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport {  useRouteMatch } from 'react-router-dom';\r\nimport { AuthContext } from '../auth';\r\nimport { ProfileContext } from '../profile';\r\nimport './PetMatches.css';\r\nimport NavPage from '../Navigation';\r\n\r\nconst capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\r\n\r\nconst PetDetailPage = () => {\r\n\r\n    const profileService = useContext(ProfileContext);\r\n    const [profile, setProfile] = useState(null);\r\n    const match = useRouteMatch({\r\n        path: '/profiles/:id',\r\n        strict: true,\r\n        sensitive: true\r\n    });\r\n\r\n    const profileId = match.params.id;\r\n\r\n    profileService.getByProfileId(profileId)\r\n        .then(profileObj => setProfile(profileObj))\r\n        .catch(error => console.log(error));\r\n    return (\r\n        <>\r\n        <NavPage />\r\n        {profile ? (\r\n            <div className=\"container d-flex justify-content-center align-items-center vh-100\">\r\n                <div className=\"card shadow\" style={{ width: '18rem' }}>\r\n                    <img className=\"card-img-top\" src={profile.imageUrl} alt=\"\" />\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{profile.name}</h5>\r\n                        <p className=\"card-text\">\r\n                            {capitalize(profile.breed)}\r\n                            <br />\r\n                            {capitalize(profile.gender)}\r\n                            <br />\r\n                            {profile.age} years old\r\n                        </p>\r\n                        <p className='card-ext small'>\r\n                            {profile.bio}\r\n                        </p>\r\n                    </div>            \r\n                </div>\r\n            </div>\r\n        ) : (\r\n            <p>Profile not found</p>\r\n        )\r\n        }</>\r\n    )\r\n};\r\n\r\nfunction PetDetailsPage() {\r\n    return (\r\n        <AuthContext.Consumer>{(firebaseAuthService) => (\r\n            <ProfileContext.Consumer>{(firebaseProfileService) => (\r\n                <PetDetailPage\r\n                    authService={firebaseAuthService}\r\n                    profileService={firebaseProfileService}/>\r\n            )}</ProfileContext.Consumer>\r\n        )}</AuthContext.Consumer>        \r\n    );\r\n}\r\nexport default PetDetailsPage;","import LogoutPage from './LogoutPage';\r\n\r\nexport default LogoutPage;","import React, { useContext, useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AuthContext } from '../auth';\r\n\r\nconst LogoutPage = (props) => {\r\n    const auth = useContext(AuthContext);\r\n    const history = useHistory();\r\n    const [error, setError] = useState('');\r\n\r\n    useEffect(() => {\r\n        console.log(\"Logging out\");\r\n        auth.signOut()\r\n            .then(history.push('/login'))\r\n            .catch(error => setError(\"Error logging out\"));\r\n        });\r\n\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                {error}\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default LogoutPage;","import React, { useState, useContext, useLayoutEffect, useEffect } from 'react';\r\nimport { useRef } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Carousel from 'react-bootstrap/Carousel';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { AuthContext } from '../auth';\r\nimport { ProfileContext } from '../profile';\r\nimport './swiper.css';\r\n\r\n// The JavaScript % operator is the remainder not the modulo.\r\n// We need this function to correctly handle mod of negative numbers.\r\nconst mod = (n, m) => ((n % m) + m) % m;\r\n\r\nconst Swiper = () => {\r\n\r\n    const authService = useContext(AuthContext);\r\n    const profileService = useContext(ProfileContext);\r\n    const cardRef = useRef(null)\r\n    const [profiles, setProfiles] = useState([]);\r\n\r\n    const handleClick = (direction) => {\r\n        if (direction === 'left') {\r\n            cardRef.current.className += ' slide-out-left';\r\n        } else if (direction === 'right') {\r\n            profileService.addMatch(authService.getCurrentUser().uid, profiles[0].id);\r\n            cardRef.current.className += ' slide-out-right';\r\n        }\r\n    }\r\n\r\n    const popProfile = () => {\r\n        const [head, ...tail] = profiles;\r\n        setProfiles(tail);\r\n        setTimeout(() => {\r\n            if (cardRef && cardRef.current) {\r\n                cardRef.current.className = 'card'\r\n            }\r\n        }, 500);\r\n    }\r\n\r\n    const buttonStyle = {\r\n        backgroundColor: '#D5A6BD',\r\n        borderColor: '#D5A6BD',\r\n        color: '#212121',\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!profiles.length) {\r\n            profileService.getMatchSuggestions(authService.getCurrentUser().uid)\r\n                .then(profiles => {\r\n                    setProfiles(profiles)\r\n                });\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <Container className='d-flex flex-column align-items-center py-5'>\r\n            {profiles.length ? (\r\n                <>\r\n                    <Card style={{ width: '18rem' }} ref={cardRef} onAnimationEnd={popProfile}>\r\n                        <div style={{ backgroundImage: `url(${profiles[0].imageUrl})`, backgroundSize: 'cover', backgroundRepeat: 'no-repeat', backgroundPosition: 'center' }}>\r\n                            <Card.Img\r\n                                variant='top'\r\n                                width={286}\r\n                                height={358}\r\n                                style={{ visibility: 'hidden' }}\r\n                            />\r\n                        </div>\r\n                        <Card.Body>\r\n                            <Card.Title>{profiles[0].name}</Card.Title>\r\n                            <Card.Text>{profiles[0].breed}</Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                    <div className='mt-4'>\r\n                        <Button\r\n                            className='mr-2'\r\n                            style={buttonStyle}\r\n                            onClick={() => handleClick('left')}\r\n                        >\r\n                            Swipe Left\r\n                        </Button>\r\n                        <Button \r\n                            style={buttonStyle}\r\n                            onClick={() => handleClick('right')}\r\n                        >\r\n                            Swipe Right\r\n                        </Button>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <p>You have no potential matches</p>\r\n            )}\r\n            \r\n        </Container>\r\n    );\r\n\r\n};\r\n\r\nexport default Swiper;","import React, { useState, useContext, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { AuthContext } from '../auth';\r\nimport { ProfileContext } from '../profile';\r\nimport NavPage from '../Navigation';\r\n\r\nconst MyProfilesPage = () => {\r\n\r\n    const authService = useContext(AuthContext)\r\n    const profileService = useContext(ProfileContext);\r\n\r\n    const [profiles, setProfiles] = useState([]);\r\n\r\n    const imageDivStyle = (profile) => ({ \r\n        backgroundImage: `url(${profile.imageUrl})`, \r\n        backgroundSize: 'cover', \r\n        backgroundRepeat: 'no-repeat', \r\n        backgroundPosition: 'center'\r\n    });\r\n\r\n    const createButtonStyle = {\r\n        width: '80px',\r\n        height: '80px',\r\n        borderRadius: '50%',\r\n        backgroundColor: '#D5A6BD',\r\n        border: '1px solid #D5A6BD',\r\n        fontSize: '64px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        position: 'fixed',\r\n        bottom: '20px',\r\n        right: '30px',\r\n    };\r\n\r\n    const capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\r\n\r\n    useEffect(() => {\r\n        profileService.getByUserId(authService.getCurrentUser().uid)\r\n            .then(profiles => setProfiles(profiles));\r\n    }, [])\r\n\r\n    return (\r\n        <div className='container pb-5' >\r\n            <NavPage />\r\n            <p className='h1'>Your Profiles</p>\r\n            <hr />\r\n            {profiles.length ?\r\n                profiles.map(profile =>\r\n                    <Link\r\n                        to={`/profiles/${profile.id}`} \r\n                        style={{ textDecoration: 'none', color: '#212121'}}\r\n                    >\r\n                        <div className=\"card mb-3\" key={profile.id}>\r\n                            <div className=\"row no-gutters\">\r\n                                <div className=\"col-4\" style={imageDivStyle(profile)}>\r\n                                </div>\r\n                                <div className=\"col-8\">\r\n                                    <div className=\"card-body\">\r\n                                        <h5 className=\"card-title\">{profile.name}</h5>\r\n                                        <p className=\"card-text\">\r\n                                            {capitalize(profile.gender)} {capitalize(profile.breed)}\r\n                                            <br />\r\n                                            {profile.age} years old\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Link>\r\n                ) : (\r\n                    <p>You don't have any profiles yet &#9785;</p>\r\n                )\r\n            }\r\n            <Link to='/create'>\r\n                <button style={createButtonStyle}>\r\n                    <p>+</p>\r\n                </button>\r\n            </Link>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default MyProfilesPage;","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Alert, Button, Form } from 'react-bootstrap';\r\n\r\nconst ProfileCreatorForm = (props) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const [name, setName] = useState('');\r\n    const [breed, setBreed] = useState('');\r\n    const [gender, setGender] = useState('male');\r\n    const [type, setType] = useState('dog');\r\n    const [age, setAge] = useState('');\r\n    const [bio, setBio] = useState('');\r\n    const [imageFile, setImageFile] = useState(null);\r\n    const [previewDataURL, setPreviewDataURL] = useState('');\r\n\r\n    const handleProfilePic = (file) => {\r\n        setImageFile(file);\r\n\r\n        let reader = new FileReader();\r\n        reader.onload = (e) => {\r\n            setPreviewDataURL(e.target.result);\r\n        }\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const data = { name, type, breed, gender, age, bio }; \r\n        \r\n        props.onSubmit(props.user.uid, imageFile, data)\r\n            .then(() => history.replace('/profiles'))\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Form.Group controlId='name'>\r\n                <Form.Label>Name</Form.Label>\r\n                <Form.Control\r\n                    type='text'\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)} \r\n                />\r\n            </Form.Group>\r\n            <Form.Group controlId='type'>\r\n                <Form.Label>Type</Form.Label>\r\n                <Form.Check \r\n                    type='radio'\r\n                    label='Dog'\r\n                    id='type-radio-male'\r\n                    checked={type === 'dog'}\r\n                    onClick={() => setType('dog')}\r\n                />\r\n                <Form.Check \r\n                    type='radio'\r\n                    label='Cat'\r\n                    id='type-radio-female'\r\n                    checked={type === 'cat'}\r\n                    onClick={() => setType('cat')}\r\n                />\r\n            </Form.Group>\r\n            <Form.Group controlId='breed'>\r\n                <Form.Label>Breed</Form.Label>\r\n                <Form.Control\r\n                    type='text'\r\n                    value={breed}\r\n                    onChange={(e) => setBreed(e.target.value)}\r\n                />\r\n            </Form.Group>\r\n            <Form.Group controlId='gender'>\r\n                <Form.Label>Gender</Form.Label>\r\n                <Form.Check\r\n                    type='radio'\r\n                    label='Male'\r\n                    id='gender-radio'\r\n                    checked={gender === 'male'}\r\n                    onClick={() => setGender('male')}\r\n                />\r\n                <Form.Check\r\n                    type='radio'\r\n                    label='Female'\r\n                    id='gender-radio'\r\n                    checked={gender === 'female'}\r\n                    onClick={() => setGender('female')}\r\n                />\r\n            </Form.Group>\r\n            <Form.Group controlId='age'>\r\n                <Form.Label>Age</Form.Label>\r\n                <Form.Control \r\n                    type='text'\r\n                    value={age}\r\n                    onChange={(e) => setAge(e.target.value)}\r\n                />\r\n            </Form.Group>\r\n            <Form.Group controlId='bio'>\r\n                <Form.Label>Bio</Form.Label>\r\n                <Form.Control\r\n                    as='textarea'\r\n                    rows={3}\r\n                    value={bio}\r\n                    onChange={(e) => setBio(e.target.value)}\r\n                />\r\n            </Form.Group>\r\n            <Form.Group controlId='profile-picture'>\r\n                <Form.Label>Profile Picture</Form.Label>\r\n                <Form.File\r\n                    id=\"profil-picture-file\"\r\n                    onChange={(e) => handleProfilePic(e.target.files[0])}        \r\n                />\r\n                <img src={previewDataURL} width={200} />\r\n            </Form.Group>\r\n            {props.error &&\r\n                <Alert variant=\"danger\">\r\n                    {props.error}\r\n                </Alert>\r\n            }\r\n            <div className=\"text-center\">\r\n                <Button type=\"submit\" className=\"px-4 LoginForm-button\">\r\n                    Create\r\n                </Button>\r\n            </div>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default ProfileCreatorForm;","import React, { useContext } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { AuthContext } from '../auth';\r\nimport { ProfileContext } from '../profile';\r\nimport ProfileCreatorForm from './ProfileCreatorForm';\r\n\r\nconst ProfileCreatorPage = () => {\r\n\r\n    const authService = useContext(AuthContext);\r\n    const profileService = useContext(ProfileContext);\r\n\r\n    return (\r\n        <Container fluid=\"sm\" className=\"py-5\">\r\n            <div className='text-center'>\r\n                <img src={`${process.env.PUBLIC_URL}/logo.png`} width={200}/>\r\n                <h1>Create a Profile</h1>\r\n            </div>\r\n            <ProfileCreatorForm\r\n                user={authService.getCurrentUser()}\r\n                onSubmit={profileService.create}\r\n            />\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default ProfileCreatorPage;","\r\nimport React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport { AuthRoute } from './common';\r\nimport LoginPage from './Login/LoginPage';\r\nimport RegisterPage from './Register/RegisterPage'\r\nimport PasswordResetPage from './PasswordReset';\r\nimport PetMatchesPage from './Matches/PetMatchesPage';\r\nimport PetDetailsPage from './Matches/PetDetailsPage';\r\nimport LogoutPage from './Logout';\r\nimport Swiper from './Swiper/Swiper';\r\nimport { MyProfilesPage, ProfileCreatorPage } from './ProfileCreator';\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <Switch>\r\n            <AuthRoute path='/' exact={true} component={PetMatchesPage} />\r\n            <AuthRoute exact path='/profiles' component={MyProfilesPage} />\r\n            <AuthRoute path='/profiles/:id' component={PetDetailsPage} />\r\n            <AuthRoute path='/find' component={Swiper} /> \r\n            <AuthRoute path='/create' component={ProfileCreatorPage} /> \r\n            <Route path='/login' component={LoginPage} />\r\n            <Route path='/register' component={RegisterPage} />\r\n            <Route path='/password-reset' component={PasswordResetPage} />\r\n            <Route path='/logout' component={LogoutPage} />\r\n        </Switch>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport firebase from 'firebase';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { AuthService, AuthContext } from './auth';\r\nimport { UserService, UserContext } from './user';\r\nimport { ProfileService, ProfileContext } from './profile';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AuthContext.Provider value={new AuthService()}>\r\n      <UserContext.Provider value={new UserService()}>\r\n        <ProfileContext.Provider value={new ProfileService()}>\r\n          <BrowserRouter>\r\n            <App />\r\n          </BrowserRouter>\r\n        </ProfileContext.Provider>\r\n      </UserContext.Provider>\r\n    </AuthContext.Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}